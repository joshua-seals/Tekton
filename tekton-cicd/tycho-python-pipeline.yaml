# This manifest pipeline takes advantage of tekton hub tasks that already exist.
#  

apiVersion: tekton.dev/v1beta1
kind: Pipeline 
metadata: 
  name: tycho-python-pipeline
spec:
  description: >-
   This pipeline pulls source code from a repo, 
   runs pytest, flak8, pylint tests,
   builds dockerfile using kaniko and pushes to registry 
   then cleans up data from the persistant volume claim used for storage between tasks.
  params:
    - name: repo-url
      type: string
      default: "github.com/[YOUR-REPONAME]/[YOUR-REPO]"
    - name: image
      type: string
      default: "[repo/image]"
    - name: versionTag
      type: string
      default: "[image-tag]"
    - name: pytest-path
      type: string 
      default: "tests"
    - name: requirements_file
      type: string
      default: requirements.txt
    - name: flake-path
      type: string 
      default: ""
    
  workspaces: 
    - name: shared-data
    - name: docker-credentials
  tasks:
    - name: clone-source
      taskRef:
        name: clone
      params:
        - name: url 
          value: $(params.repo-url)
      workspaces:
        - name: output
          workspace: shared-data
    ###### PYTEST ###############
    - name: unit-test
      taskRef: 
        name: pytest
      params:
        - name: SOURCE_PATH 
          value: "./source/$(params.pytest-path)"
        - name: REQUIREMENTS_FILE
          value: "./source/$(params.requirements_file)"
      workspaces:
        - name: source
          workspace: shared-data 
      runAfter:
        - "clone-source"
    #
    ##### FLAKE8 #######
    - name: linter
      taskRef: 
        name: flake8-custom
      workspaces:
        - name: source
          workspace: shared-data 
      params:
        - name: path
          value: "./source/$(params.flake-path)"
        - name: requirements_file
          value: "./source/$(params.requirements_file)"
      runAfter:
        - "clone-source"
    #
    ####### KANIKO ############
    - name: build-and-push
      taskRef:
        name: kaniko
      workspaces:
        - name: dockerconfig
          workspace: docker-credentials
        - name: source
          workspace: shared-data
      params:
        - name: IMAGE
          value: $(params.image):$(params.versionTag)
        - name: CONTEXT
          value: "./source/"
      runAfter: ["unit-test", "linter"]
    #
    ######### GITHUB ALERT ################
    - name: set-github-status
      taskRef:
        name: set-github-status
      workspaces:
        - name: ref-files
          workspace: shared-data 
      runAfter: ["build-and-push"]
#     ######### SLACK ALERT ###############
    # Slack alert needs to run even if failure from other task
    # Sending the appropriate testing messages to the channel.
    - name: slack-alert
      taskRef:
        name: slack
      workspaces:
        - name: source
          workspace: shared-data 
      runAfter: ["build-and-push"]
# #
########## FINALLY POST ALERT AND CLEANUP TASKS ###################
  finally:
####### CLEANUP TASK TO REMOVE PVC DATA #########
    - name: cleanup
      taskRef:
        name: cleanup
      workspaces:
        - name: source
          workspace: shared-data